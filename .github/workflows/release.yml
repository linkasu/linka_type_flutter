name: Multi-Platform Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # Запускается при создании тега вида v1.0.0

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  build-android-release:
    name: Build Android AAB
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-deps-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks
        
    - name: Configure signing
      run: |
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=../app/upload-keystore.jks" >> android/key.properties
        
    - name: Build Android App Bundle
      run: flutter build appbundle --release
      
    - name: Extract version from tag
      id: version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Rename AAB with version
      run: |
        cp build/app/outputs/bundle/release/app-release.aab build/app/outputs/bundle/release/linka-napishi-${{ steps.version.outputs.version }}.aab
        
    - name: Get Release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          core.setOutput('upload_url', release.data.upload_url);
          return release.data;
        
    - name: Upload Android AAB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: build/app/outputs/bundle/release/linka-napishi-${{ steps.version.outputs.version }}.aab
        asset_name: linka-napishi-${{ steps.version.outputs.version }}.aab
        asset_content_type: application/octet-stream

  build-macos-release:
    name: Build macOS DMG
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS app
      run: flutter build macos --release
      
    - name: Extract version from tag
      id: version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Create DMG directory structure
      run: |
        mkdir -p dmg_build
        cp -r build/macos/Build/Products/Release/LINKa\ напиши.app dmg_build/
        
    - name: Create DMG
      run: |
        # Создаем временный DMG
        hdiutil create -srcfolder dmg_build -volname "LINKa напиши" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size 200m temp.dmg
        
        # Монтируем DMG
        device=$(hdiutil attach -readwrite -noverify -noautoopen "temp.dmg" | egrep '^/dev/' | sed 1q | awk '{print $1}')
        
        # Создаем символическую ссылку на Applications
        ln -s /Applications "/Volumes/LINKa напиши/Applications"
        
        # Настраиваем права доступа
        chmod -Rf 755 "/Volumes/LINKa напиши"
        
        # Отключаем DMG
        hdiutil detach "$device"
        
        # Создаем финальный сжатый DMG
        hdiutil convert "temp.dmg" -format UDZO -imagekey zlib-level=9 -o "LINKa-napishi-${{ steps.version.outputs.version }}.dmg"
        
        # Удаляем временный файл
        rm temp.dmg
        
    - name: Get Release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          core.setOutput('upload_url', release.data.upload_url);
          return release.data;
        
    - name: Upload macOS DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: LINKa-napishi-${{ steps.version.outputs.version }}.dmg
        asset_name: LINKa-napishi-${{ steps.version.outputs.version }}.dmg
        asset_content_type: application/octet-stream

  build-windows-release:
    name: Build Windows MSI
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Windows app
      run: flutter build windows --release
      
    - name: Install Inno Setup via Chocolatey
      run: |
        Write-Host "Installing Inno Setup via Chocolatey..."
        choco install innosetup -y
        Write-Host "Inno Setup installed successfully"
        
    - name: Download Visual C++ Redistributable
      run: |
        $url = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
        $output = "installer\vc_redist.x64.exe"
        Write-Host "Downloading Visual C++ Redistributable from $url"
        try {
          Invoke-WebRequest -Uri $url -OutFile $output -TimeoutSec 300
          Write-Host "VC Redistributable downloaded successfully"
        } catch {
          Write-Host "Failed to download VC Redistributable: $_"
          exit 1
        }
        
    - name: Create installer directory structure
      run: |
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        mkdir dist
        
    - name: Compile Inno Setup script
      run: |
        echo "Compiling Inno Setup script..."
        $isccPath = "C:\ProgramData\chocolatey\lib\innosetup\tools\ISCC.exe"
        if (-not (Test-Path $isccPath)) {
          $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        }
        if (-not (Test-Path $isccPath)) {
          echo "❌ Inno Setup compiler not found"
          exit 1
        }
        & $isccPath installer\linka_setup.iss
        if ($LASTEXITCODE -ne 0) {
          echo "❌ Inno Setup compilation failed"
          exit 1
        }
        echo "✅ Inno Setup installer created successfully"
        dir installer\dist
        
    - name: Extract version from tag
      id: version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Get Release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          core.setOutput('upload_url', release.data.upload_url);
          return release.data;
        
    - name: Upload Windows MSI
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: installer/dist/LINKa-napishi-4.0.0-setup.exe
        asset_name: LINKa-napishi-${{ steps.version.outputs.version }}-setup.exe
        asset_content_type: application/octet-stream