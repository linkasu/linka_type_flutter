name: macOS DMG Build

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-macos-dmg:
    name: Build macOS DMG
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build macOS app
      run: flutter build macos --release
      
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Create DMG directory structure
      run: |
        mkdir -p dmg_build
        cp -r build/macos/Build/Products/Release/LINKa\ напиши.app dmg_build/
        
    - name: Create DMG
      run: |
        # Создаем временный DMG
        hdiutil create -srcfolder dmg_build -volname "LINKa напиши" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size 200m temp.dmg
        
        # Монтируем DMG
        device=$(hdiutil attach -readwrite -noverify -noautoopen "temp.dmg" | egrep '^/dev/' | sed 1q | awk '{print $1}')
        
        # Создаем символическую ссылку на Applications
        ln -s /Applications "/Volumes/LINKa напиши/Applications"
        
        # Настраиваем права доступа
        chmod -Rf 755 "/Volumes/LINKa напиши"
        
        # Отключаем DMG
        hdiutil detach "$device"
        
        # Создаем финальный сжатый DMG
        hdiutil convert "temp.dmg" -format UDZO -imagekey zlib-level=9 -o "LINKa-napishi-${{ steps.version.outputs.version }}.dmg"
        
        # Удаляем временный файл
        rm temp.dmg
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: LINKa-napishi-${{ steps.version.outputs.version }}.dmg
        
    - name: Get Release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          core.setOutput('upload_url', release.data.upload_url);
          return release.data;
        
    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: LINKa-napishi-${{ steps.version.outputs.version }}.dmg
        asset_name: LINKa-napishi-${{ steps.version.outputs.version }}.dmg
        asset_content_type: application/octet-stream
        
    - name: Create Release Summary
      if: github.event_name == 'release'
      run: |
        echo "## macOS DMG Installer" >> $GITHUB_STEP_SUMMARY
        echo "✅ macOS DMG installer created successfully" >> $GITHUB_STEP_SUMMARY
        echo "📦 File: LINKa-napishi-${{ steps.version.outputs.version }}.dmg" >> $GITHUB_STEP_SUMMARY
        echo "🍎 Includes: Flutter app, all dependencies, drag-to-install" >> $GITHUB_STEP_SUMMARY
        echo "🌐 Publisher: linka.su" >> $GITHUB_STEP_SUMMARY
