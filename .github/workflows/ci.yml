name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --set-exit-if-changed .
      
    - name: Analyze project source
      run: flutter analyze || true
      
    - name: Run tests
      run: flutter test || true

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev
        sudo apt-get install -y gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly
        sudo apt-get install -y gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache Linux build
      uses: actions/cache@v4
      with:
        path: |
          build/linux
        key: ${{ runner.os }}-linux-${{ hashFiles('**/pubspec.lock', '**/linux/**') }}
        restore-keys: |
          ${{ runner.os }}-linux-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Upload Linux build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: build/linux/x64/release/bundle/

  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev
        sudo apt-get install -y gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly
        sudo apt-get install -y gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache Linux build
      uses: actions/cache@v4
      with:
        path: |
          build/linux
        key: ${{ runner.os }}-linux-${{ hashFiles('**/pubspec.lock', '**/linux/**') }}
        restore-keys: |
          ${{ runner.os }}-linux-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Download Linux build artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: build/linux/x64/release/bundle/
      
    - name: Install fpm for DEB packaging
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev build-essential
        sudo gem install fpm
        
    - name: Create DEB package
      run: |
        # Создаем структуру для DEB пакета
        mkdir -p deb-package/usr/share/linka-napishi
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/bin
        
        # Копируем файлы приложения
        cp -r build/linux/x64/release/bundle/* deb-package/usr/share/linka-napishi/
        
        # Создаем исполняемый файл
        cat > deb-package/usr/bin/linka-napishi << 'EOF'
        #!/bin/bash
        cd /usr/share/linka-napishi
        exec ./linka_type_flutter "$@"
        EOF
        chmod +x deb-package/usr/bin/linka-napishi
        
        # Создаем .desktop файл
        cat > deb-package/usr/share/applications/linka-napishi.desktop << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=LINKa напиши
        Comment=Приложение для набора текста с поддержкой TTS
        Exec=linka-napishi
        Icon=linka-napishi
        Terminal=false
        Categories=Office;TextEditor;
        EOF
        
        # Копируем иконку
        cp assets/app_icon.png deb-package/usr/share/pixmaps/linka-napishi.png
        
        # Создаем DEB пакет
        fpm -s dir -t deb -n linka-napishi -v 4.0.9 --iteration 1 \
          --description "LINKa напиши - приложение для набора текста с поддержкой TTS" \
          --maintainer "aacidov" \
          --url "https://github.com/aacidov/linka_type_flutter" \
          --category office \
          --license "MIT" \
          -C deb-package .
          
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: deb-package
        path: linka-napishi_4.0.9-1_amd64.deb

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache Windows build
      uses: actions/cache@v4
      with:
        path: |
          build/windows
        key: ${{ runner.os }}-windows-${{ hashFiles('**/pubspec.lock', '**/windows/**') }}
        restore-keys: |
          ${{ runner.os }}-windows-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Windows app
      run: flutter build windows --release
      
    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: build/windows/x64/runner/Release/

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          ios/Pods
          macos/Pods
          ~/Library/Caches/CocoaPods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Cache macOS build
      uses: actions/cache@v4
      with:
        path: |
          build/macos
        key: ${{ runner.os }}-macos-${{ hashFiles('**/pubspec.lock', '**/macos/**') }}
        restore-keys: |
          ${{ runner.os }}-macos-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Install CocoaPods dependencies
      run: |
        cd ios && pod install --repo-update
        cd ../macos && pod install --repo-update
      
    - name: Build macOS app
      run: flutter build macos --release
      
    - name: Upload macOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: build/macos/Build/Products/Release/

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Android dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-android-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-apt-android-
          ${{ runner.os }}-apt-
          
    - name: Install additional dependencies for Android
      run: |
        sudo apt-get update
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
      
    - name: Cache Android build
      uses: actions/cache@v4
      with:
        path: |
          build/app
        key: ${{ runner.os }}-android-${{ hashFiles('**/pubspec.lock', '**/android/**') }}
        restore-keys: |
          ${{ runner.os }}-android-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Android APK
      run: flutter build apk --release
      
    - name: Build Android App Bundle
      run: flutter build appbundle --release
      
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: |
          build/app/outputs/flutter-apk/app-release.apk
          build/app/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: |
          ios/Pods
          ~/Library/Caches/CocoaPods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Cache iOS build
      uses: actions/cache@v4
      with:
        path: |
          build/ios
        key: ${{ runner.os }}-ios-${{ hashFiles('**/pubspec.lock', '**/ios/**') }}
        restore-keys: |
          ${{ runner.os }}-ios-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Install CocoaPods dependencies
      run: cd ios && pod install --repo-update
      
    - name: Build iOS app
      run: flutter build ios --release --no-codesign
      
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/ios/iphoneos/Runner.app

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache Dart dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-
          
    - name: Cache Web build
      uses: actions/cache@v4
      with:
        path: |
          build/web
        key: ${{ runner.os }}-web-${{ hashFiles('**/pubspec.lock', '**/web/**') }}
        restore-keys: |
          ${{ runner.os }}-web-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Web app
      run: flutter build web --release
      
    - name: Upload Web build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/

