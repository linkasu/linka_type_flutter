name: Build DEB Package

on:
  workflow_dispatch:  # Ручной запуск
  push:
    tags:
      - 'v*.*.*'  # Запускается при создании тега вида v1.0.0

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev
        sudo apt-get install -y gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly
        sudo apt-get install -y gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl
        sudo apt-get install -y ruby ruby-dev build-essential
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-deps-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Install fpm for DEB packaging
      run: |
        sudo gem install fpm
        
    - name: Extract version from tag
      id: version
      run: |
        if [ -n "$GITHUB_REF" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Create DEB package structure
      run: |
        # Создаем структуру для DEB пакета
        mkdir -p deb-package/usr/share/linka-napishi
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/pixmaps
        mkdir -p deb-package/usr/bin
        
        # Копируем файлы приложения
        cp -r build/linux/x64/release/bundle/* deb-package/usr/share/linka-napishi/
        
        # Создаем исполняемый файл
        cat > deb-package/usr/bin/linka-napishi << 'EOF'
        #!/bin/bash
        cd /usr/share/linka-napishi
        exec ./linka_type_flutter "$@"
        EOF
        chmod +x deb-package/usr/bin/linka-napishi
        
        # Создаем .desktop файл
        cat > deb-package/usr/share/applications/linka-napishi.desktop << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=LINKa напиши
        Comment=Приложение для набора текста с поддержкой TTS
        Exec=linka-napishi
        Icon=linka-napishi
        Terminal=false
        Categories=Office;TextEditor;
        Keywords=text;editor;tts;speech;
        EOF
        
        # Копируем иконку
        cp assets/app_icon.png deb-package/usr/share/pixmaps/linka-napishi.png
        
    - name: Create DEB package
      run: |
        # Создаем DEB пакет
        fpm -s dir -t deb -n linka-napishi -v ${{ steps.version.outputs.version }} --iteration 1 \
          --description "LINKa напиши - приложение для набора текста с поддержкой TTS" \
          --maintainer "aacidov <aacidov@example.com>" \
          --url "https://github.com/aacidov/linka_type_flutter" \
          --category office \
          --license "MIT" \
          --vendor "aacidov" \
          --architecture amd64 \
          --depends "libgtk-3-0" \
          --depends "libstdc++6" \
          -C deb-package .
          
        echo "DEB package created: linka-napishi_${{ steps.version.outputs.version }}-1_amd64.deb"
        ls -la *.deb
        
    - name: Upload DEB package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: deb-package-${{ steps.version.outputs.version }}
        path: linka-napishi_${{ steps.version.outputs.version }}-1_amd64.deb
        
    - name: Upload to release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Этот шаг будет выполнен только если workflow запущен из-за тега
        echo "Uploading DEB package to release..."
        # Загрузка в релиз будет выполнена в основном release.yml workflow
